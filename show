#!/usr/bin/env ruby
require 'sqlite3'
require 'getoptlong'
require './model.rb'
require './deck.rb'

DATABASE="cards.db"

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--deck', '-d', GetoptLong::NO_ARGUMENT ]
)

@objects = :cards

opts.each do |opt,arg|
  case opt
  when '--help'
    puts <<-END
show [--help] 
show cardid cardid...
show --deck deckstring deckstring...
END
  when '--deck'
    @objects = :decks
  end
end

def parse_deck(str)
  (l,a,d) = str.split(':')
  [l, a.split(','), d.split(',')]
end

SQLite3::Database.new( DATABASE ) do |db|

  if @objects == :cards then
    decks = Model.current_decks(db)
    ARGV.each do |arg|
      cs = Cardstate.new({ "card" => arg});
      cs.fetch(db)
      puts cs.pretty

      decks.each do |deck|
        role = deck.card_role(arg.to_i)
        if role then
          puts "Deck \##{deck.name}: #{Model.normalize_role(role)}"
        end
      end
    end
  else
    ARGV.each do |arg|
      if arg.include? ':'
        deck = Deck.new(*parse_deck(arg))
        deck.loadcards(db)
      else
        deck = Deck.from_db(db, arg)
      end

      if deck
        puts deck.full_info
      else
        puts "Cannot find or parse deck #{arg}"
      end
    end
  end

end
