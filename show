#!/usr/bin/env ruby
require 'sqlite3'
require 'getoptlong'
require './model.rb'
require './deck.rb'

DATABASE="cards.db"

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--deck', '-d', GetoptLong::NO_ARGUMENT ],
  [ '--tags', '-t', GetoptLong::NO_ARGUMENT ],
  [ '--brief', '-b', GetoptLong::NO_ARGUMENT ]
)

@objects = :cards
@show_tags = false
@display = :full

opts.each do |opt,arg|
  case opt
  when '--help'
    puts <<-END
show [--help] 
show [-b] [-t] cardid cardid...
show [-b] [-t] --deck deckstring deckstring...
 --tags : include tag information
 --brief : brief output, card ids only
END
  when '--deck'
    @objects = :decks
  when '--tags'
    @show_tags = true
  when '--brief'
    @display = :brief
  end
end

def parse_deck(str)
  (l,a,d) = str.split(':')
  [l, a.split(','), d.split(',')]
end

SQLite3::Database.new( DATABASE ) do |db|

  if @objects == :cards then
    decks = Model.current_decks(db)
    ARGV.each do |arg|
      cs = Cardstate.new({ "card" => arg});
      cs.fetch(db)

      if @display == :full then
        puts cs.pretty(@show_tags)

        decks.each do |deck|
          role = deck.card_role(arg.to_i)
          if role then
            puts "Deck \##{deck.name}: #{Model.normalize_role(role)}"
          end
        end
      else
        puts arg
      end
    end
  else
    ARGV.each do |arg|
      if arg.include? ':'
        deck = Deck.new(*parse_deck(arg))
        deck.loadcards(db)
      else
        deck = Deck.from_db(db, arg)
      end

      if deck
        if @display == :full then
          puts deck.full_info(@show_tags)
        else
          puts deck.to_s
        end
      else
        puts "Cannot find or parse deck #{arg}"
      end
    end
  end

end
